
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package compiladorprojeto;

import java_cup.runtime.Symbol;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Sintaxe extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Sintaxe() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Sintaxe(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintaxe(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\073\000\002\002\004\000\002\002\013\000\002\002" +
    "\011\000\002\003\004\000\002\003\003\000\002\003\004" +
    "\000\002\003\003\000\002\003\004\000\002\003\003\000" +
    "\002\003\004\000\002\003\003\000\002\003\004\000\002" +
    "\003\003\000\002\003\004\000\002\003\003\000\002\003" +
    "\004\000\002\003\003\000\002\004\005\000\002\004\005" +
    "\000\002\004\007\000\002\004\005\000\002\004\005\000" +
    "\002\004\006\000\002\004\006\000\002\004\010\000\002" +
    "\004\010\000\002\004\010\000\002\004\010\000\002\004" +
    "\010\000\002\004\011\000\002\004\006\000\002\004\006" +
    "\000\002\004\006\000\002\004\006\000\002\004\006\000" +
    "\002\004\006\000\002\004\006\000\002\004\006\000\002" +
    "\004\006\000\002\004\006\000\002\004\006\000\002\004" +
    "\006\000\002\005\011\000\002\006\015\000\002\007\003" +
    "\000\002\007\005\000\002\007\005\000\002\007\005\000" +
    "\002\007\006\000\002\007\005\000\002\010\011\000\002" +
    "\011\013\000\002\012\011\000\002\013\012\000\002\013" +
    "\011\000\002\014\005\000\002\014\005\000\002\014\004" +
    "\000\002\014\004" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\254\000\006\004\004\011\006\001\002\000\004\005" +
    "\247\001\002\000\004\002\246\001\002\000\004\007\007" +
    "\001\002\000\004\022\010\001\002\000\004\023\011\001" +
    "\002\000\004\024\012\001\002\000\026\010\023\011\014" +
    "\012\016\014\032\015\027\016\030\033\021\034\020\041" +
    "\026\042\013\001\002\000\012\027\235\030\232\031\233" +
    "\032\234\001\002\000\004\041\225\001\002\000\030\010" +
    "\ufff7\011\ufff7\012\ufff7\014\ufff7\015\ufff7\016\ufff7\025\ufff7" +
    "\033\ufff7\034\ufff7\041\ufff7\042\ufff7\001\002\000\004\022" +
    "\213\001\002\000\030\010\ufff3\011\ufff3\012\ufff3\014\ufff3" +
    "\015\ufff3\016\ufff3\025\ufff3\033\ufff3\034\ufff3\041\ufff3\042" +
    "\ufff3\001\002\000\030\010\ufff1\011\ufff1\012\ufff1\014\ufff1" +
    "\015\ufff1\016\ufff1\025\ufff1\033\ufff1\034\ufff1\041\ufff1\042" +
    "\ufff1\001\002\000\004\041\211\001\002\000\030\010\ufffd" +
    "\011\ufffd\012\ufffd\014\ufffd\015\ufffd\016\ufffd\025\ufffd\033" +
    "\ufffd\034\ufffd\041\ufffd\042\ufffd\001\002\000\004\041\200" +
    "\001\002\000\030\010\ufff9\011\ufff9\012\ufff9\014\ufff9\015" +
    "\ufff9\016\ufff9\025\ufff9\033\ufff9\034\ufff9\041\ufff9\042\ufff9" +
    "\001\002\000\030\010\ufffb\011\ufffb\012\ufffb\014\ufffb\015" +
    "\ufffb\016\ufffb\025\ufffb\033\ufffb\034\ufffb\041\ufffb\042\ufffb" +
    "\001\002\000\020\017\132\027\134\030\131\031\130\032" +
    "\135\036\133\037\127\001\002\000\004\024\117\001\002" +
    "\000\004\022\111\001\002\000\030\010\023\011\014\012" +
    "\016\014\032\015\027\016\030\025\110\033\021\034\074" +
    "\041\026\042\013\001\002\000\004\022\034\001\002\000" +
    "\030\010\ufff5\011\ufff5\012\ufff5\014\ufff5\015\ufff5\016\ufff5" +
    "\025\ufff5\033\ufff5\034\ufff5\041\ufff5\042\ufff5\001\002\000" +
    "\006\011\037\041\035\001\002\000\004\017\102\001\002" +
    "\000\004\023\067\001\002\000\004\041\040\001\002\000" +
    "\004\017\041\001\002\000\004\042\042\001\002\000\004" +
    "\026\043\001\002\000\006\040\045\041\044\001\002\000" +
    "\004\035\061\001\002\000\006\023\uffd5\026\uffd5\001\002" +
    "\000\004\026\047\001\002\000\006\037\050\041\051\001" +
    "\002\000\004\041\060\001\002\000\010\017\054\036\055" +
    "\037\053\001\002\000\004\023\uffcc\001\002\000\004\023" +
    "\uffc8\001\002\000\004\042\057\001\002\000\004\042\056" +
    "\001\002\000\004\023\uffca\001\002\000\004\023\uffc9\001" +
    "\002\000\004\023\uffc7\001\002\000\012\020\065\040\064" +
    "\041\062\042\063\001\002\000\006\023\uffd2\026\uffd2\001" +
    "\002\000\006\023\uffd3\026\uffd3\001\002\000\006\023\uffd4" +
    "\026\uffd4\001\002\000\010\020\066\023\uffd0\026\uffd0\001" +
    "\002\000\006\023\uffd1\026\uffd1\001\002\000\004\024\070" +
    "\001\002\000\026\010\023\011\014\012\016\014\032\015" +
    "\027\016\030\033\021\034\020\041\026\042\013\001\002" +
    "\000\030\010\023\011\014\012\016\014\032\015\027\016" +
    "\030\025\100\033\021\034\074\041\026\042\013\001\002" +
    "\000\030\010\ufff8\011\ufff8\012\ufff8\014\ufff8\015\ufff8\016" +
    "\ufff8\025\ufff8\033\ufff8\034\ufff8\041\ufff8\042\ufff8\001\002" +
    "\000\030\010\ufff4\011\ufff4\012\ufff4\014\ufff4\015\ufff4\016" +
    "\ufff4\025\ufff4\033\ufff4\034\ufff4\041\ufff4\042\ufff4\001\002" +
    "\000\030\010\ufff2\011\ufff2\012\ufff2\014\ufff2\015\ufff2\016" +
    "\ufff2\025\ufff2\033\ufff2\034\ufff2\041\ufff2\042\ufff2\001\002" +
    "\000\030\010\ufffe\011\ufffe\012\ufffe\014\ufffe\015\ufffe\016" +
    "\ufffe\025\ufffe\033\ufffe\034\ufffe\041\ufffe\042\ufffe\001\002" +
    "\000\030\010\ufffa\011\ufffa\012\ufffa\014\ufffa\015\ufffa\016" +
    "\ufffa\025\ufffa\033\ufffa\034\ufffa\041\ufffa\042\ufffa\001\002" +
    "\000\030\010\ufffc\011\ufffc\012\ufffc\014\ufffc\015\ufffc\016" +
    "\ufffc\025\ufffc\033\ufffc\034\ufffc\041\ufffc\042\ufffc\001\002" +
    "\000\030\010\uffcd\011\uffcd\012\uffcd\014\uffcd\015\uffcd\016" +
    "\uffcd\025\uffcd\033\uffcd\034\uffcd\041\uffcd\042\uffcd\001\002" +
    "\000\030\010\ufff6\011\ufff6\012\ufff6\014\ufff6\015\ufff6\016" +
    "\ufff6\025\ufff6\033\ufff6\034\ufff6\041\ufff6\042\ufff6\001\002" +
    "\000\004\042\103\001\002\000\004\026\104\001\002\000" +
    "\006\040\045\041\044\001\002\000\004\026\106\001\002" +
    "\000\006\037\050\041\051\001\002\000\004\023\uffcb\001" +
    "\002\000\004\002\uffff\001\002\000\006\040\045\041\044" +
    "\001\002\000\004\023\113\001\002\000\004\024\114\001" +
    "\002\000\026\010\023\011\014\012\016\014\032\015\027" +
    "\016\030\033\021\034\020\041\026\042\013\001\002\000" +
    "\030\010\023\011\014\012\016\014\032\015\027\016\030" +
    "\025\116\033\021\034\074\041\026\042\013\001\002\000" +
    "\030\010\uffcf\011\uffcf\012\uffcf\014\uffcf\015\uffcf\016\uffcf" +
    "\025\uffcf\033\uffcf\034\uffcf\041\uffcf\042\uffcf\001\002\000" +
    "\026\010\023\011\014\012\016\014\032\015\027\016\030" +
    "\033\021\034\020\041\026\042\013\001\002\000\030\010" +
    "\023\011\014\012\016\014\032\015\027\016\030\025\121" +
    "\033\021\034\074\041\026\042\013\001\002\000\004\016" +
    "\122\001\002\000\004\022\123\001\002\000\006\040\045" +
    "\041\044\001\002\000\004\023\125\001\002\000\004\026" +
    "\126\001\002\000\030\010\uffce\011\uffce\012\uffce\014\uffce" +
    "\015\uffce\016\uffce\025\uffce\033\uffce\034\uffce\041\uffce\042" +
    "\uffce\001\002\000\004\026\177\001\002\000\006\041\174" +
    "\042\173\001\002\000\006\041\167\042\170\001\002\000" +
    "\006\041\151\042\150\001\002\000\004\042\146\001\002" +
    "\000\006\041\142\042\143\001\002\000\006\041\136\042" +
    "\137\001\002\000\004\026\141\001\002\000\004\026\140" +
    "\001\002\000\030\010\uffdc\011\uffdc\012\uffdc\014\uffdc\015" +
    "\uffdc\016\uffdc\025\uffdc\033\uffdc\034\uffdc\041\uffdc\042\uffdc" +
    "\001\002\000\030\010\uffe0\011\uffe0\012\uffe0\014\uffe0\015" +
    "\uffe0\016\uffe0\025\uffe0\033\uffe0\034\uffe0\041\uffe0\042\uffe0" +
    "\001\002\000\004\026\145\001\002\000\004\026\144\001" +
    "\002\000\030\010\uffdf\011\uffdf\012\uffdf\014\uffdf\015\uffdf" +
    "\016\uffdf\025\uffdf\033\uffdf\034\uffdf\041\uffdf\042\uffdf\001" +
    "\002\000\030\010\uffe3\011\uffe3\012\uffe3\014\uffe3\015\uffe3" +
    "\016\uffe3\025\uffe3\033\uffe3\034\uffe3\041\uffe3\042\uffe3\001" +
    "\002\000\004\026\147\001\002\000\030\010\uffeb\011\uffeb" +
    "\012\uffeb\014\uffeb\015\uffeb\016\uffeb\025\uffeb\033\uffeb\034" +
    "\uffeb\041\uffeb\042\uffeb\001\002\000\004\026\166\001\002" +
    "\000\012\027\154\030\152\031\153\032\155\001\002\000" +
    "\004\041\164\001\002\000\004\041\162\001\002\000\004" +
    "\041\160\001\002\000\004\041\156\001\002\000\004\026" +
    "\157\001\002\000\030\010\uffe6\011\uffe6\012\uffe6\014\uffe6" +
    "\015\uffe6\016\uffe6\025\uffe6\033\uffe6\034\uffe6\041\uffe6\042" +
    "\uffe6\001\002\000\004\026\161\001\002\000\030\010\uffe9" +
    "\011\uffe9\012\uffe9\014\uffe9\015\uffe9\016\uffe9\025\uffe9\033" +
    "\uffe9\034\uffe9\041\uffe9\042\uffe9\001\002\000\004\026\163" +
    "\001\002\000\030\010\uffe7\011\uffe7\012\uffe7\014\uffe7\015" +
    "\uffe7\016\uffe7\025\uffe7\033\uffe7\034\uffe7\041\uffe7\042\uffe7" +
    "\001\002\000\004\026\165\001\002\000\030\010\uffe8\011" +
    "\uffe8\012\uffe8\014\uffe8\015\uffe8\016\uffe8\025\uffe8\033\uffe8" +
    "\034\uffe8\041\uffe8\042\uffe8\001\002\000\030\010\uffea\011" +
    "\uffea\012\uffea\014\uffea\015\uffea\016\uffea\025\uffea\033\uffea" +
    "\034\uffea\041\uffea\042\uffea\001\002\000\004\026\172\001" +
    "\002\000\004\026\171\001\002\000\030\010\uffde\011\uffde" +
    "\012\uffde\014\uffde\015\uffde\016\uffde\025\uffde\033\uffde\034" +
    "\uffde\041\uffde\042\uffde\001\002\000\030\010\uffe2\011\uffe2" +
    "\012\uffe2\014\uffe2\015\uffe2\016\uffe2\025\uffe2\033\uffe2\034" +
    "\uffe2\041\uffe2\042\uffe2\001\002\000\004\026\176\001\002" +
    "\000\004\026\175\001\002\000\030\010\uffe1\011\uffe1\012" +
    "\uffe1\014\uffe1\015\uffe1\016\uffe1\025\uffe1\033\uffe1\034\uffe1" +
    "\041\uffe1\042\uffe1\001\002\000\030\010\uffdd\011\uffdd\012" +
    "\uffdd\014\uffdd\015\uffdd\016\uffdd\025\uffdd\033\uffdd\034\uffdd" +
    "\041\uffdd\042\uffdd\001\002\000\030\010\uffec\011\uffec\012" +
    "\uffec\014\uffec\015\uffec\016\uffec\025\uffec\033\uffec\034\uffec" +
    "\041\uffec\042\uffec\001\002\000\006\017\201\026\202\001" +
    "\002\000\004\020\203\001\002\000\030\010\uffed\011\uffed" +
    "\012\uffed\014\uffed\015\uffed\016\uffed\025\uffed\033\uffed\034" +
    "\uffed\041\uffed\042\uffed\001\002\000\006\020\205\041\204" +
    "\001\002\000\004\020\207\001\002\000\004\026\206\001" +
    "\002\000\030\010\uffe5\011\uffe5\012\uffe5\014\uffe5\015\uffe5" +
    "\016\uffe5\025\uffe5\033\uffe5\034\uffe5\041\uffe5\042\uffe5\001" +
    "\002\000\004\026\210\001\002\000\030\010\uffe4\011\uffe4" +
    "\012\uffe4\014\uffe4\015\uffe4\016\uffe4\025\uffe4\033\uffe4\034" +
    "\uffe4\041\uffe4\042\uffe4\001\002\000\004\026\212\001\002" +
    "\000\030\010\ufff0\011\ufff0\012\ufff0\014\ufff0\015\ufff0\016" +
    "\ufff0\025\ufff0\033\ufff0\034\ufff0\041\ufff0\042\ufff0\001\002" +
    "\000\006\040\045\041\044\001\002\000\004\023\215\001" +
    "\002\000\004\024\216\001\002\000\026\010\023\011\014" +
    "\012\016\014\032\015\027\016\030\033\021\034\020\041" +
    "\026\042\013\001\002\000\030\010\023\011\014\012\016" +
    "\014\032\015\027\016\030\025\220\033\021\034\074\041" +
    "\026\042\013\001\002\000\032\010\uffd7\011\uffd7\012\uffd7" +
    "\013\221\014\uffd7\015\uffd7\016\uffd7\025\uffd7\033\uffd7\034" +
    "\uffd7\041\uffd7\042\uffd7\001\002\000\004\024\222\001\002" +
    "\000\026\010\023\011\014\012\016\014\032\015\027\016" +
    "\030\033\021\034\020\041\026\042\013\001\002\000\030" +
    "\010\023\011\014\012\016\014\032\015\027\016\030\025" +
    "\224\033\021\034\074\041\026\042\013\001\002\000\030" +
    "\010\uffd6\011\uffd6\012\uffd6\014\uffd6\015\uffd6\016\uffd6\025" +
    "\uffd6\033\uffd6\034\uffd6\041\uffd6\042\uffd6\001\002\000\006" +
    "\017\226\026\227\001\002\000\004\042\230\001\002\000" +
    "\030\010\uffef\011\uffef\012\uffef\014\uffef\015\uffef\016\uffef" +
    "\025\uffef\033\uffef\034\uffef\041\uffef\042\uffef\001\002\000" +
    "\004\026\231\001\002\000\030\010\uffee\011\uffee\012\uffee" +
    "\014\uffee\015\uffee\016\uffee\025\uffee\033\uffee\034\uffee\041" +
    "\uffee\042\uffee\001\002\000\004\042\244\001\002\000\004" +
    "\042\242\001\002\000\004\042\240\001\002\000\004\042" +
    "\236\001\002\000\004\026\237\001\002\000\030\010\uffdb" +
    "\011\uffdb\012\uffdb\014\uffdb\015\uffdb\016\uffdb\025\uffdb\033" +
    "\uffdb\034\uffdb\041\uffdb\042\uffdb\001\002\000\004\026\241" +
    "\001\002\000\030\010\uffd8\011\uffd8\012\uffd8\014\uffd8\015" +
    "\uffd8\016\uffd8\025\uffd8\033\uffd8\034\uffd8\041\uffd8\042\uffd8" +
    "\001\002\000\004\026\243\001\002\000\030\010\uffd9\011" +
    "\uffd9\012\uffd9\014\uffd9\015\uffd9\016\uffd9\025\uffd9\033\uffd9" +
    "\034\uffd9\041\uffd9\042\uffd9\001\002\000\004\026\245\001" +
    "\002\000\030\010\uffda\011\uffda\012\uffda\014\uffda\015\uffda" +
    "\016\uffda\025\uffda\033\uffda\034\uffda\041\uffda\042\uffda\001" +
    "\002\000\004\002\001\001\002\000\004\006\250\001\002" +
    "\000\004\007\251\001\002\000\004\022\252\001\002\000" +
    "\004\023\253\001\002\000\004\024\254\001\002\000\026" +
    "\010\023\011\014\012\016\014\032\015\027\016\030\033" +
    "\021\034\020\041\026\042\013\001\002\000\030\010\023" +
    "\011\014\012\016\014\032\015\027\016\030\025\256\033" +
    "\021\034\074\041\026\042\013\001\002\000\004\002\000" +
    "\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\254\000\004\002\004\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\020\003\030\004\021\005" +
    "\024\006\023\010\014\011\032\012\016\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\016\004\074\005\076\006\075\010\071\011" +
    "\100\012\072\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\013\035\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\007\045\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\014\051" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\020\003\070\004\021\005\024\006\023\010\014" +
    "\011\032\012\016\001\001\000\016\004\074\005\076\006" +
    "\075\010\071\011\100\012\072\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\007" +
    "\104\001\001\000\002\001\001\000\004\014\106\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\007\111\001" +
    "\001\000\002\001\001\000\002\001\001\000\020\003\114" +
    "\004\021\005\024\006\023\010\014\011\032\012\016\001" +
    "\001\000\016\004\074\005\076\006\075\010\071\011\100" +
    "\012\072\001\001\000\002\001\001\000\020\003\117\004" +
    "\021\005\024\006\023\010\014\011\032\012\016\001\001" +
    "\000\016\004\074\005\076\006\075\010\071\011\100\012" +
    "\072\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\007\123\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\007\213\001\001\000\002\001\001" +
    "\000\002\001\001\000\020\003\216\004\021\005\024\006" +
    "\023\010\014\011\032\012\016\001\001\000\016\004\074" +
    "\005\076\006\075\010\071\011\100\012\072\001\001\000" +
    "\002\001\001\000\002\001\001\000\020\003\222\004\021" +
    "\005\024\006\023\010\014\011\032\012\016\001\001\000" +
    "\016\004\074\005\076\006\075\010\071\011\100\012\072" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\020\003\254\004\021" +
    "\005\024\006\023\010\014\011\032\012\016\001\001\000" +
    "\016\004\074\005\076\006\075\010\071\011\100\012\072" +
    "\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintaxe$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintaxe$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintaxe$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    private Symbol s;

    public void syntax_error(Symbol s) {
        this.s = s;
    }

    public Symbol getS() {
        return this.s;
    }
}


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Sintaxe$actions {
  private final Sintaxe parser;

  /** Constructor */
  CUP$Sintaxe$actions(Sintaxe parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Sintaxe$do_action_part00000000(
    int                        CUP$Sintaxe$act_num,
    java_cup.runtime.lr_parser CUP$Sintaxe$parser,
    java.util.Stack            CUP$Sintaxe$stack,
    int                        CUP$Sintaxe$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintaxe$result;

      /* select the action based on the action number */
      switch (CUP$Sintaxe$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintaxe$stack.elementAt(CUP$Sintaxe$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintaxe$stack.elementAt(CUP$Sintaxe$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Sintaxe$stack.elementAt(CUP$Sintaxe$top-1)).value;
		RESULT = start_val;
              CUP$Sintaxe$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintaxe$stack.elementAt(CUP$Sintaxe$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxe$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintaxe$parser.done_parsing();
          return CUP$Sintaxe$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= PUBLICO ESTATICO VAZIO PRINCIPAL ABREPAR FECHAPAR ABRECHA SENTENCA FECHACHA 
            {
              Object RESULT =null;

              CUP$Sintaxe$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintaxe$stack.elementAt(CUP$Sintaxe$top-8)), ((java_cup.runtime.Symbol)CUP$Sintaxe$stack.peek()), RESULT);
            }
          return CUP$Sintaxe$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // INICIO ::= INT PRINCIPAL ABREPAR FECHAPAR ABRECHA SENTENCA FECHACHA 
            {
              Object RESULT =null;

              CUP$Sintaxe$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintaxe$stack.elementAt(CUP$Sintaxe$top-6)), ((java_cup.runtime.Symbol)CUP$Sintaxe$stack.peek()), RESULT);
            }
          return CUP$Sintaxe$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // SENTENCA ::= SENTENCA DECLARACAO 
            {
              Object RESULT =null;

              CUP$Sintaxe$result = parser.getSymbolFactory().newSymbol("SENTENCA",1, ((java_cup.runtime.Symbol)CUP$Sintaxe$stack.elementAt(CUP$Sintaxe$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxe$stack.peek()), RESULT);
            }
          return CUP$Sintaxe$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // SENTENCA ::= DECLARACAO 
            {
              Object RESULT =null;

              CUP$Sintaxe$result = parser.getSymbolFactory().newSymbol("SENTENCA",1, ((java_cup.runtime.Symbol)CUP$Sintaxe$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxe$stack.peek()), RESULT);
            }
          return CUP$Sintaxe$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // SENTENCA ::= SENTENCA IF 
            {
              Object RESULT =null;

              CUP$Sintaxe$result = parser.getSymbolFactory().newSymbol("SENTENCA",1, ((java_cup.runtime.Symbol)CUP$Sintaxe$stack.elementAt(CUP$Sintaxe$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxe$stack.peek()), RESULT);
            }
          return CUP$Sintaxe$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // SENTENCA ::= IF 
            {
              Object RESULT =null;

              CUP$Sintaxe$result = parser.getSymbolFactory().newSymbol("SENTENCA",1, ((java_cup.runtime.Symbol)CUP$Sintaxe$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxe$stack.peek()), RESULT);
            }
          return CUP$Sintaxe$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // SENTENCA ::= SENTENCA IF_ELSE 
            {
              Object RESULT =null;

              CUP$Sintaxe$result = parser.getSymbolFactory().newSymbol("SENTENCA",1, ((java_cup.runtime.Symbol)CUP$Sintaxe$stack.elementAt(CUP$Sintaxe$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxe$stack.peek()), RESULT);
            }
          return CUP$Sintaxe$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // SENTENCA ::= IF_ELSE 
            {
              Object RESULT =null;

              CUP$Sintaxe$result = parser.getSymbolFactory().newSymbol("SENTENCA",1, ((java_cup.runtime.Symbol)CUP$Sintaxe$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxe$stack.peek()), RESULT);
            }
          return CUP$Sintaxe$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // SENTENCA ::= SENTENCA WHILE 
            {
              Object RESULT =null;

              CUP$Sintaxe$result = parser.getSymbolFactory().newSymbol("SENTENCA",1, ((java_cup.runtime.Symbol)CUP$Sintaxe$stack.elementAt(CUP$Sintaxe$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxe$stack.peek()), RESULT);
            }
          return CUP$Sintaxe$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // SENTENCA ::= WHILE 
            {
              Object RESULT =null;

              CUP$Sintaxe$result = parser.getSymbolFactory().newSymbol("SENTENCA",1, ((java_cup.runtime.Symbol)CUP$Sintaxe$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxe$stack.peek()), RESULT);
            }
          return CUP$Sintaxe$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // SENTENCA ::= SENTENCA DO_WHILE 
            {
              Object RESULT =null;

              CUP$Sintaxe$result = parser.getSymbolFactory().newSymbol("SENTENCA",1, ((java_cup.runtime.Symbol)CUP$Sintaxe$stack.elementAt(CUP$Sintaxe$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxe$stack.peek()), RESULT);
            }
          return CUP$Sintaxe$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // SENTENCA ::= DO_WHILE 
            {
              Object RESULT =null;

              CUP$Sintaxe$result = parser.getSymbolFactory().newSymbol("SENTENCA",1, ((java_cup.runtime.Symbol)CUP$Sintaxe$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxe$stack.peek()), RESULT);
            }
          return CUP$Sintaxe$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // SENTENCA ::= SENTENCA FOR 
            {
              Object RESULT =null;

              CUP$Sintaxe$result = parser.getSymbolFactory().newSymbol("SENTENCA",1, ((java_cup.runtime.Symbol)CUP$Sintaxe$stack.elementAt(CUP$Sintaxe$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxe$stack.peek()), RESULT);
            }
          return CUP$Sintaxe$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // SENTENCA ::= FOR 
            {
              Object RESULT =null;

              CUP$Sintaxe$result = parser.getSymbolFactory().newSymbol("SENTENCA",1, ((java_cup.runtime.Symbol)CUP$Sintaxe$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxe$stack.peek()), RESULT);
            }
          return CUP$Sintaxe$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // SENTENCA ::= SENTENCA OPLOG 
            {
              Object RESULT =null;

              CUP$Sintaxe$result = parser.getSymbolFactory().newSymbol("SENTENCA",1, ((java_cup.runtime.Symbol)CUP$Sintaxe$stack.elementAt(CUP$Sintaxe$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxe$stack.peek()), RESULT);
            }
          return CUP$Sintaxe$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // SENTENCA ::= OPLOG 
            {
              Object RESULT =null;

              CUP$Sintaxe$result = parser.getSymbolFactory().newSymbol("SENTENCA",1, ((java_cup.runtime.Symbol)CUP$Sintaxe$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxe$stack.peek()), RESULT);
            }
          return CUP$Sintaxe$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // DECLARACAO ::= DADO ID PONTOV 
            {
              Object RESULT =null;

              CUP$Sintaxe$result = parser.getSymbolFactory().newSymbol("DECLARACAO",2, ((java_cup.runtime.Symbol)CUP$Sintaxe$stack.elementAt(CUP$Sintaxe$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxe$stack.peek()), RESULT);
            }
          return CUP$Sintaxe$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // DECLARACAO ::= INT ID PONTOV 
            {
              Object RESULT =null;

              CUP$Sintaxe$result = parser.getSymbolFactory().newSymbol("DECLARACAO",2, ((java_cup.runtime.Symbol)CUP$Sintaxe$stack.elementAt(CUP$Sintaxe$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxe$stack.peek()), RESULT);
            }
          return CUP$Sintaxe$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // DECLARACAO ::= INT ID IGUAL NUM PONTOV 
            {
              Object RESULT =null;

              CUP$Sintaxe$result = parser.getSymbolFactory().newSymbol("DECLARACAO",2, ((java_cup.runtime.Symbol)CUP$Sintaxe$stack.elementAt(CUP$Sintaxe$top-4)), ((java_cup.runtime.Symbol)CUP$Sintaxe$stack.peek()), RESULT);
            }
          return CUP$Sintaxe$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // DECLARACAO ::= STRING ID PONTOV 
            {
              Object RESULT =null;

              CUP$Sintaxe$result = parser.getSymbolFactory().newSymbol("DECLARACAO",2, ((java_cup.runtime.Symbol)CUP$Sintaxe$stack.elementAt(CUP$Sintaxe$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxe$stack.peek()), RESULT);
            }
          return CUP$Sintaxe$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // DECLARACAO ::= ID OPINCR PONTOV 
            {
              Object RESULT =null;

              CUP$Sintaxe$result = parser.getSymbolFactory().newSymbol("DECLARACAO",2, ((java_cup.runtime.Symbol)CUP$Sintaxe$stack.elementAt(CUP$Sintaxe$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxe$stack.peek()), RESULT);
            }
          return CUP$Sintaxe$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // DECLARACAO ::= ID OPATRI NUM PONTOV 
            {
              Object RESULT =null;

              CUP$Sintaxe$result = parser.getSymbolFactory().newSymbol("DECLARACAO",2, ((java_cup.runtime.Symbol)CUP$Sintaxe$stack.elementAt(CUP$Sintaxe$top-3)), ((java_cup.runtime.Symbol)CUP$Sintaxe$stack.peek()), RESULT);
            }
          return CUP$Sintaxe$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // DECLARACAO ::= ID IGUAL NUM PONTOV 
            {
              Object RESULT =null;

              CUP$Sintaxe$result = parser.getSymbolFactory().newSymbol("DECLARACAO",2, ((java_cup.runtime.Symbol)CUP$Sintaxe$stack.elementAt(CUP$Sintaxe$top-3)), ((java_cup.runtime.Symbol)CUP$Sintaxe$stack.peek()), RESULT);
            }
          return CUP$Sintaxe$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // DECLARACAO ::= ID IGUAL ID SOMA ID PONTOV 
            {
              Object RESULT =null;

              CUP$Sintaxe$result = parser.getSymbolFactory().newSymbol("DECLARACAO",2, ((java_cup.runtime.Symbol)CUP$Sintaxe$stack.elementAt(CUP$Sintaxe$top-5)), ((java_cup.runtime.Symbol)CUP$Sintaxe$stack.peek()), RESULT);
            }
          return CUP$Sintaxe$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // DECLARACAO ::= ID IGUAL ID SUB ID PONTOV 
            {
              Object RESULT =null;

              CUP$Sintaxe$result = parser.getSymbolFactory().newSymbol("DECLARACAO",2, ((java_cup.runtime.Symbol)CUP$Sintaxe$stack.elementAt(CUP$Sintaxe$top-5)), ((java_cup.runtime.Symbol)CUP$Sintaxe$stack.peek()), RESULT);
            }
          return CUP$Sintaxe$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // DECLARACAO ::= ID IGUAL ID MULT ID PONTOV 
            {
              Object RESULT =null;

              CUP$Sintaxe$result = parser.getSymbolFactory().newSymbol("DECLARACAO",2, ((java_cup.runtime.Symbol)CUP$Sintaxe$stack.elementAt(CUP$Sintaxe$top-5)), ((java_cup.runtime.Symbol)CUP$Sintaxe$stack.peek()), RESULT);
            }
          return CUP$Sintaxe$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // DECLARACAO ::= ID IGUAL ID DIV ID PONTOV 
            {
              Object RESULT =null;

              CUP$Sintaxe$result = parser.getSymbolFactory().newSymbol("DECLARACAO",2, ((java_cup.runtime.Symbol)CUP$Sintaxe$stack.elementAt(CUP$Sintaxe$top-5)), ((java_cup.runtime.Symbol)CUP$Sintaxe$stack.peek()), RESULT);
            }
          return CUP$Sintaxe$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // DECLARACAO ::= STRING ID IGUAL ASPAS ASPAS PONTOV 
            {
              Object RESULT =null;

              CUP$Sintaxe$result = parser.getSymbolFactory().newSymbol("DECLARACAO",2, ((java_cup.runtime.Symbol)CUP$Sintaxe$stack.elementAt(CUP$Sintaxe$top-5)), ((java_cup.runtime.Symbol)CUP$Sintaxe$stack.peek()), RESULT);
            }
          return CUP$Sintaxe$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // DECLARACAO ::= STRING ID IGUAL ASPAS ID ASPAS PONTOV 
            {
              Object RESULT =null;

              CUP$Sintaxe$result = parser.getSymbolFactory().newSymbol("DECLARACAO",2, ((java_cup.runtime.Symbol)CUP$Sintaxe$stack.elementAt(CUP$Sintaxe$top-6)), ((java_cup.runtime.Symbol)CUP$Sintaxe$stack.peek()), RESULT);
            }
          return CUP$Sintaxe$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // DECLARACAO ::= ID SOMA ID PONTOV 
            {
              Object RESULT =null;

              CUP$Sintaxe$result = parser.getSymbolFactory().newSymbol("DECLARACAO",2, ((java_cup.runtime.Symbol)CUP$Sintaxe$stack.elementAt(CUP$Sintaxe$top-3)), ((java_cup.runtime.Symbol)CUP$Sintaxe$stack.peek()), RESULT);
            }
          return CUP$Sintaxe$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // DECLARACAO ::= ID SUB ID PONTOV 
            {
              Object RESULT =null;

              CUP$Sintaxe$result = parser.getSymbolFactory().newSymbol("DECLARACAO",2, ((java_cup.runtime.Symbol)CUP$Sintaxe$stack.elementAt(CUP$Sintaxe$top-3)), ((java_cup.runtime.Symbol)CUP$Sintaxe$stack.peek()), RESULT);
            }
          return CUP$Sintaxe$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // DECLARACAO ::= ID MULT ID PONTOV 
            {
              Object RESULT =null;

              CUP$Sintaxe$result = parser.getSymbolFactory().newSymbol("DECLARACAO",2, ((java_cup.runtime.Symbol)CUP$Sintaxe$stack.elementAt(CUP$Sintaxe$top-3)), ((java_cup.runtime.Symbol)CUP$Sintaxe$stack.peek()), RESULT);
            }
          return CUP$Sintaxe$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // DECLARACAO ::= ID DIV ID PONTOV 
            {
              Object RESULT =null;

              CUP$Sintaxe$result = parser.getSymbolFactory().newSymbol("DECLARACAO",2, ((java_cup.runtime.Symbol)CUP$Sintaxe$stack.elementAt(CUP$Sintaxe$top-3)), ((java_cup.runtime.Symbol)CUP$Sintaxe$stack.peek()), RESULT);
            }
          return CUP$Sintaxe$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // DECLARACAO ::= ID SOMA NUM PONTOV 
            {
              Object RESULT =null;

              CUP$Sintaxe$result = parser.getSymbolFactory().newSymbol("DECLARACAO",2, ((java_cup.runtime.Symbol)CUP$Sintaxe$stack.elementAt(CUP$Sintaxe$top-3)), ((java_cup.runtime.Symbol)CUP$Sintaxe$stack.peek()), RESULT);
            }
          return CUP$Sintaxe$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // DECLARACAO ::= ID SUB NUM PONTOV 
            {
              Object RESULT =null;

              CUP$Sintaxe$result = parser.getSymbolFactory().newSymbol("DECLARACAO",2, ((java_cup.runtime.Symbol)CUP$Sintaxe$stack.elementAt(CUP$Sintaxe$top-3)), ((java_cup.runtime.Symbol)CUP$Sintaxe$stack.peek()), RESULT);
            }
          return CUP$Sintaxe$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // DECLARACAO ::= ID MULT NUM PONTOV 
            {
              Object RESULT =null;

              CUP$Sintaxe$result = parser.getSymbolFactory().newSymbol("DECLARACAO",2, ((java_cup.runtime.Symbol)CUP$Sintaxe$stack.elementAt(CUP$Sintaxe$top-3)), ((java_cup.runtime.Symbol)CUP$Sintaxe$stack.peek()), RESULT);
            }
          return CUP$Sintaxe$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // DECLARACAO ::= ID DIV NUM PONTOV 
            {
              Object RESULT =null;

              CUP$Sintaxe$result = parser.getSymbolFactory().newSymbol("DECLARACAO",2, ((java_cup.runtime.Symbol)CUP$Sintaxe$stack.elementAt(CUP$Sintaxe$top-3)), ((java_cup.runtime.Symbol)CUP$Sintaxe$stack.peek()), RESULT);
            }
          return CUP$Sintaxe$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // DECLARACAO ::= NUM SOMA NUM PONTOV 
            {
              Object RESULT =null;

              CUP$Sintaxe$result = parser.getSymbolFactory().newSymbol("DECLARACAO",2, ((java_cup.runtime.Symbol)CUP$Sintaxe$stack.elementAt(CUP$Sintaxe$top-3)), ((java_cup.runtime.Symbol)CUP$Sintaxe$stack.peek()), RESULT);
            }
          return CUP$Sintaxe$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // DECLARACAO ::= NUM SUB NUM PONTOV 
            {
              Object RESULT =null;

              CUP$Sintaxe$result = parser.getSymbolFactory().newSymbol("DECLARACAO",2, ((java_cup.runtime.Symbol)CUP$Sintaxe$stack.elementAt(CUP$Sintaxe$top-3)), ((java_cup.runtime.Symbol)CUP$Sintaxe$stack.peek()), RESULT);
            }
          return CUP$Sintaxe$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // DECLARACAO ::= NUM MULT NUM PONTOV 
            {
              Object RESULT =null;

              CUP$Sintaxe$result = parser.getSymbolFactory().newSymbol("DECLARACAO",2, ((java_cup.runtime.Symbol)CUP$Sintaxe$stack.elementAt(CUP$Sintaxe$top-3)), ((java_cup.runtime.Symbol)CUP$Sintaxe$stack.peek()), RESULT);
            }
          return CUP$Sintaxe$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // DECLARACAO ::= NUM DIV NUM PONTOV 
            {
              Object RESULT =null;

              CUP$Sintaxe$result = parser.getSymbolFactory().newSymbol("DECLARACAO",2, ((java_cup.runtime.Symbol)CUP$Sintaxe$stack.elementAt(CUP$Sintaxe$top-3)), ((java_cup.runtime.Symbol)CUP$Sintaxe$stack.peek()), RESULT);
            }
          return CUP$Sintaxe$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // IF ::= SE ABREPAR SENTENCA_BOOLEANA FECHAPAR ABRECHA SENTENCA FECHACHA 
            {
              Object RESULT =null;

              CUP$Sintaxe$result = parser.getSymbolFactory().newSymbol("IF",3, ((java_cup.runtime.Symbol)CUP$Sintaxe$stack.elementAt(CUP$Sintaxe$top-6)), ((java_cup.runtime.Symbol)CUP$Sintaxe$stack.peek()), RESULT);
            }
          return CUP$Sintaxe$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // IF_ELSE ::= SE ABREPAR SENTENCA_BOOLEANA FECHAPAR ABRECHA SENTENCA FECHACHA SENAO ABRECHA SENTENCA FECHACHA 
            {
              Object RESULT =null;

              CUP$Sintaxe$result = parser.getSymbolFactory().newSymbol("IF_ELSE",4, ((java_cup.runtime.Symbol)CUP$Sintaxe$stack.elementAt(CUP$Sintaxe$top-10)), ((java_cup.runtime.Symbol)CUP$Sintaxe$stack.peek()), RESULT);
            }
          return CUP$Sintaxe$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // SENTENCA_BOOLEANA ::= OPBOOL 
            {
              Object RESULT =null;

              CUP$Sintaxe$result = parser.getSymbolFactory().newSymbol("SENTENCA_BOOLEANA",5, ((java_cup.runtime.Symbol)CUP$Sintaxe$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxe$stack.peek()), RESULT);
            }
          return CUP$Sintaxe$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // SENTENCA_BOOLEANA ::= ID OPREL OPBOOL 
            {
              Object RESULT =null;

              CUP$Sintaxe$result = parser.getSymbolFactory().newSymbol("SENTENCA_BOOLEANA",5, ((java_cup.runtime.Symbol)CUP$Sintaxe$stack.elementAt(CUP$Sintaxe$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxe$stack.peek()), RESULT);
            }
          return CUP$Sintaxe$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // SENTENCA_BOOLEANA ::= ID OPREL NUM 
            {
              Object RESULT =null;

              CUP$Sintaxe$result = parser.getSymbolFactory().newSymbol("SENTENCA_BOOLEANA",5, ((java_cup.runtime.Symbol)CUP$Sintaxe$stack.elementAt(CUP$Sintaxe$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxe$stack.peek()), RESULT);
            }
          return CUP$Sintaxe$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // SENTENCA_BOOLEANA ::= ID OPREL ID 
            {
              Object RESULT =null;

              CUP$Sintaxe$result = parser.getSymbolFactory().newSymbol("SENTENCA_BOOLEANA",5, ((java_cup.runtime.Symbol)CUP$Sintaxe$stack.elementAt(CUP$Sintaxe$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxe$stack.peek()), RESULT);
            }
          return CUP$Sintaxe$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // SENTENCA_BOOLEANA ::= ID OPREL ASPAS ASPAS 
            {
              Object RESULT =null;

              CUP$Sintaxe$result = parser.getSymbolFactory().newSymbol("SENTENCA_BOOLEANA",5, ((java_cup.runtime.Symbol)CUP$Sintaxe$stack.elementAt(CUP$Sintaxe$top-3)), ((java_cup.runtime.Symbol)CUP$Sintaxe$stack.peek()), RESULT);
            }
          return CUP$Sintaxe$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // SENTENCA_BOOLEANA ::= ID OPREL ASPAS 
            {
              Object RESULT =null;

              CUP$Sintaxe$result = parser.getSymbolFactory().newSymbol("SENTENCA_BOOLEANA",5, ((java_cup.runtime.Symbol)CUP$Sintaxe$stack.elementAt(CUP$Sintaxe$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxe$stack.peek()), RESULT);
            }
          return CUP$Sintaxe$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // WHILE ::= ENQUANTO ABREPAR SENTENCA_BOOLEANA FECHAPAR ABRECHA SENTENCA FECHACHA 
            {
              Object RESULT =null;

              CUP$Sintaxe$result = parser.getSymbolFactory().newSymbol("WHILE",6, ((java_cup.runtime.Symbol)CUP$Sintaxe$stack.elementAt(CUP$Sintaxe$top-6)), ((java_cup.runtime.Symbol)CUP$Sintaxe$stack.peek()), RESULT);
            }
          return CUP$Sintaxe$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // DO_WHILE ::= FACA ABRECHA SENTENCA FECHACHA ENQUANTO ABREPAR SENTENCA_BOOLEANA FECHAPAR PONTOV 
            {
              Object RESULT =null;

              CUP$Sintaxe$result = parser.getSymbolFactory().newSymbol("DO_WHILE",7, ((java_cup.runtime.Symbol)CUP$Sintaxe$stack.elementAt(CUP$Sintaxe$top-8)), ((java_cup.runtime.Symbol)CUP$Sintaxe$stack.peek()), RESULT);
            }
          return CUP$Sintaxe$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // FOR ::= PARA ABREPAR SENTENCA_FOR FECHAPAR ABRECHA SENTENCA FECHACHA 
            {
              Object RESULT =null;

              CUP$Sintaxe$result = parser.getSymbolFactory().newSymbol("FOR",8, ((java_cup.runtime.Symbol)CUP$Sintaxe$stack.elementAt(CUP$Sintaxe$top-6)), ((java_cup.runtime.Symbol)CUP$Sintaxe$stack.peek()), RESULT);
            }
          return CUP$Sintaxe$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // SENTENCA_FOR ::= INT ID IGUAL NUM PONTOV SENTENCA_BOOLEANA PONTOV DECLARACAO_FOR 
            {
              Object RESULT =null;

              CUP$Sintaxe$result = parser.getSymbolFactory().newSymbol("SENTENCA_FOR",9, ((java_cup.runtime.Symbol)CUP$Sintaxe$stack.elementAt(CUP$Sintaxe$top-7)), ((java_cup.runtime.Symbol)CUP$Sintaxe$stack.peek()), RESULT);
            }
          return CUP$Sintaxe$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // SENTENCA_FOR ::= ID IGUAL NUM PONTOV SENTENCA_BOOLEANA PONTOV DECLARACAO_FOR 
            {
              Object RESULT =null;

              CUP$Sintaxe$result = parser.getSymbolFactory().newSymbol("SENTENCA_FOR",9, ((java_cup.runtime.Symbol)CUP$Sintaxe$stack.elementAt(CUP$Sintaxe$top-6)), ((java_cup.runtime.Symbol)CUP$Sintaxe$stack.peek()), RESULT);
            }
          return CUP$Sintaxe$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // DECLARACAO_FOR ::= ID OPATRI NUM 
            {
              Object RESULT =null;

              CUP$Sintaxe$result = parser.getSymbolFactory().newSymbol("DECLARACAO_FOR",10, ((java_cup.runtime.Symbol)CUP$Sintaxe$stack.elementAt(CUP$Sintaxe$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxe$stack.peek()), RESULT);
            }
          return CUP$Sintaxe$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // DECLARACAO_FOR ::= ID IGUAL NUM 
            {
              Object RESULT =null;

              CUP$Sintaxe$result = parser.getSymbolFactory().newSymbol("DECLARACAO_FOR",10, ((java_cup.runtime.Symbol)CUP$Sintaxe$stack.elementAt(CUP$Sintaxe$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxe$stack.peek()), RESULT);
            }
          return CUP$Sintaxe$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // DECLARACAO_FOR ::= ID OPINCR 
            {
              Object RESULT =null;

              CUP$Sintaxe$result = parser.getSymbolFactory().newSymbol("DECLARACAO_FOR",10, ((java_cup.runtime.Symbol)CUP$Sintaxe$stack.elementAt(CUP$Sintaxe$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxe$stack.peek()), RESULT);
            }
          return CUP$Sintaxe$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // DECLARACAO_FOR ::= OPINCR ID 
            {
              Object RESULT =null;

              CUP$Sintaxe$result = parser.getSymbolFactory().newSymbol("DECLARACAO_FOR",10, ((java_cup.runtime.Symbol)CUP$Sintaxe$stack.elementAt(CUP$Sintaxe$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxe$stack.peek()), RESULT);
            }
          return CUP$Sintaxe$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Sintaxe$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Sintaxe$do_action(
    int                        CUP$Sintaxe$act_num,
    java_cup.runtime.lr_parser CUP$Sintaxe$parser,
    java.util.Stack            CUP$Sintaxe$stack,
    int                        CUP$Sintaxe$top)
    throws java.lang.Exception
    {
              return CUP$Sintaxe$do_action_part00000000(
                               CUP$Sintaxe$act_num,
                               CUP$Sintaxe$parser,
                               CUP$Sintaxe$stack,
                               CUP$Sintaxe$top);
    }
}

}
